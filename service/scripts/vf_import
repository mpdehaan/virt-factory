#!/usr/bin/python
"""
sm_import is a utility script which imports an profile profile from an
appliance definition file.

Profile profiles should be a self-contained tarball with the following directory structure:
	profile.xml  -- includes metadata needed for adding to SM database.
	manifests/profilename.pp  -- main puppet manifest for the
  	                             profile (should include the others)
	manifests/*.pp  -- other puppet manifests, can be named anything
	files/* -- includes data files referenced by manifests
 	templates/* -- includes templates referenced by manifests

Each execution of the sm_import tool will do the following:

	Use the XML data to insert a row into the profiles database IF it's not already imported
	Import the manifests to /var/lib/virt-factory/profiles/$profile-name/manifests/*
	Import the data files to /var/lib/virt-factory/profiles/$profile-name/files/*
	Import the templates files to /var/lib/virt-factory/profiles/$profile-name/templates/*
	Update the site-wide puppet manifest as necessary

NOTE: this can only be run after the initial "vf_server import", because
      distributions are needed in order to import profile profiles. 

Copyright 2007, Red Hat, Inc
Michael DeHaan <mdehaan@redhat.com>
Adrian Likins <alikins@redhat.com>
Scott Seago <sseago@redhat.com>

This software may be freely redistributed under the terms of the GNU
general public license.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
"""


from optparse import OptionParser
import re
import string
import sys
import distutils.sysconfig
import tarfile
import traceback
import types
from xml.dom.minidom import parse, parseString

sys.path.append("%s/virt-factory" % distutils.sysconfig.get_python_lib())

from server.codes import *
from server import logger
logger.logfilepath = "/var/lib/virt-factory/vf_import.log"
from server.modules import distribution
from server.modules import profile

# TODO: should go in /var/lib/puppet/config/lib once puppet modules work
PUPPET_FILE_DIR="/var/lib/virt-factory/profiles"
PUPPET_SITE_MANIFEST="/etc/puppet/manifests/site.pp"
PUPPET_FILESERVER_CONF="/etc/puppet/fileserver.conf"
PUPPET_FILESERVER_ALLOW="*"

PROFILE_REGEXP = "profile\.xml$"
NAME_TAG = "name"
VERSION_TAG = "version"
DISTRIBUTION_TAG = "distribution"
VIRT_STORAGE_SIZE_TAG = "virt_storage_size"
VIRT_RAM_TAG = "virt_ram"
KICKSTART_METADATA_TAG = "kickstart_metadata"
KERNEL_OPTIONS_TAG = "kernel_options"
VALID_TARGETS_TAG = "valid_targets"
IS_CONTAINER_TAG = "is_container"
PUPPET_CLASSES_TAG = "puppet_classes"

DISTRIBUTION_ID_TAG = "distribution_id"

class VirtFactoryImporter:
   """
   Main class for sm_import tool
   """

   def __init__(self, tarball, module_dir, manifest, fileserver_conf, fileserver_allow):
       """
       create importer object -- source tarball is passed in
       """
       if (not tarfile.is_tarfile(tarball)):
           raise ValueError(tarball + " is not a tarfile")
       self.tarball_path = tarball
       self.module_dir = module_dir
       self.manifest = manifest
       self.fileserver_conf = fileserver_conf
       self.fileserver_allow = fileserver_allow
       log = logger.Logger()
       self.logger = log.logger

   def extract(self):
        self.tarball = tarfile.open(self.tarball_path)

        profile_member = self.tarball.getmember("profile.xml")
        profile_xml = self.tarball.extractfile(profile_member)
        self.profile = parse(profile_xml)
        self.module_name = self.get_node_text(NAME_TAG)
        
        for member in self.tarball.getmembers():
            if (re.search(PROFILE_REGEXP, member.name)):
                print "excluding ", member.name
            else:
                print "extracting ", member.name
                self.tarball.extract(member, self.module_extraction_dir())

   def module_extraction_dir(self):
       return self.module_dir + '/' + self.module_name
   
   def update_puppet_manifest(self):
       # import_str should be simply "import profile_name" once
       # puppet module support is in place
       import_str = 'import "' + self.module_extraction_dir() + '/manifests/' + self.module_name + '.pp"'
       
       if not self.search_for_in_file(self.manifest, import_str):
           print "appending ", import_str
           manifest_file = open(self.manifest, 'a')
           manifest_file.write('\n' + import_str + '\n')
           manifest_file.close();

       fileserver_str = '\[' + self.module_name + '\]'
       if not self.search_for_in_file(self.fileserver_conf, fileserver_str):
           #fileserver_conf_file = open(self.fileserver_conf)
           print "creating new fileserver conf entry"
           fileserver_conf_file = open(self.fileserver_conf, 'a')
           fileserver_conf_file.write('\n [' + self.module_name + ']\n')
           fileserver_conf_file.write('  path ' + self.module_extraction_dir() + '/files\n')
           fileserver_conf_file.write('  allow '+ self.fileserver_allow + '\n')
           fileserver_conf_file.close();

   def search_for_in_file(self, filename, search_str):
       file = open(filename)
       found = 0
       for line in file:
           if re.search(search_str, line):
               found = 1
               break
       file.close()
       return found
       
   def populate_sm_profile(self):
       profile_dict = {}
       
       self.set_node_text(profile_dict, NAME_TAG)
       self.set_node_text(profile_dict, VERSION_TAG)
       self.set_node_text(profile_dict, VIRT_STORAGE_SIZE_TAG, "int")
       self.set_node_text(profile_dict, VIRT_RAM_TAG, "int")
       self.set_node_text(profile_dict, KICKSTART_METADATA_TAG)
       self.set_node_text(profile_dict, KERNEL_OPTIONS_TAG)
       self.set_node_text(profile_dict, VALID_TARGETS_TAG)
       self.set_node_text(profile_dict, IS_CONTAINER_TAG, "int")
       self.set_node_text(profile_dict, PUPPET_CLASSES_TAG)
       self.set_node_text(profile_dict, DISTRIBUTION_TAG)
       distribution_name = profile_dict[DISTRIBUTION_TAG]
       print "distro name = ", distribution_name
       if (distribution_name is not None):
           distribution_obj = distribution.Distribution()
           distribution_result = distribution_obj.get_by_name(None, {"name": distribution_name})
           print "distro result = ", distribution_result.error_code
           if (distribution_result.error_code != 0):
               print distribution_result
               raise InvalidArgumentsException(comment="bad distribution name")
           profile_dict[DISTRIBUTION_ID_TAG] = distribution_result.data["id"]
       profile_obj = profile.Profile()
       try:
           existing_profile = profile_obj.get_by_name(None, profile_dict)
           if existing_profile.data:
               print "modifying existing profile ", profile_dict["name"]
               profile_dict["id"] = existing_profile.data["id"]
               result = profile_obj.edit(None, profile_dict)
           else:
               print "creating new profile ", profile_dict["name"]
               result = profile_obj.add(None, profile_dict)
       except Exception, e:
           print "error adding profile: "
           (t, v, tb) = sys.exc_info()
           self.logger.debug("Exception occured: %s" % t )
           self.logger.debug("Exception value: %s" % v)
           self.logger.debug("Exception Info:\n%s" % string.join(traceback.format_list(traceback.extract_tb(tb))))

       
   def get_node_text(self, name):
       children = self.profile.getElementsByTagName(name)[0].childNodes
       if (len(children)>0):
           return children[0].data
       else:
           return None
       
   def set_node_text(self, profile_dict, name, convert=None):
       value = self.get_node_text(name)
       if (value is not None):
           if (convert=="int"):
               value = int(value)
           profile_dict[name] = value

#--------------------------------------------------------------------------
      
def main():
    """
    Start things up.
    """
    
    usage = "usage: %prog [options] appliance-spec-file"
    parser = OptionParser(usage=usage)
    parser.add_option("-d", "--module-dir", dest="module",
                      help="top-level puppet module directory",
                      default=PUPPET_FILE_DIR)
    parser.add_option("-m", "--site-wide-manifest", dest="manifest",
                      help="puppet site-wide manifest",
                      default=PUPPET_SITE_MANIFEST)
    parser.add_option("-f", "--fileserver-conf", dest="fileserver_conf",
                      help="puppet fileserver configuration file",
                      default=PUPPET_FILESERVER_CONF)
    parser.add_option("-a", "--fileserver-allow", dest="fileserver_allow",
                      help="Allowed hosts for puppet fileserver config (default *)",
                      default=PUPPET_FILESERVER_ALLOW)
    
    (options, args) = parser.parse_args()
    if len(args) != 1:
        parser.error("incorrect number of arguments")    
    importer = VirtFactoryImporter(args[0], options.module, options.manifest,
                              options.fileserver_conf, options.fileserver_allow)
    print "extracting..."
    importer.extract()
    importer.update_puppet_manifest()
    print "populating..."
    importer.populate_sm_profile()

if __name__ == "__main__":
    main()



