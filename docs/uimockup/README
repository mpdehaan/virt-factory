Mockups of what the UI might be like.
Done in fancy ASCII art because that's much quicker than Inkscape.

Status:

This document is really early in the development process and is mainly
designed as a springboard for discussion.   Things will change a lot.
Right now, I'm concentraing on getting core features in (like the
relationship between things in the data model and what actions are
required), and building a rough concept of a UI helps make that
happen.  I'm not trying to crack things like SLA level management at
this point, more of just a "watercooler" type UI for basic virt --
for starters -- this will grow later to include more of Brian's list
and what we come up with later.

Screens (hierarchy).

login.txt            the login screen
   events.txt            
   machines.txt           
       machines_list.txt 
       machines_add.txt
   deployments.txt
       deployments_list.txt
       deployments_deploy.txt
   images.txt
       images_list.txt
       images_add.txt
   accounts.txt
       accounts_users.txt
   setup.txt
       setup_notifications.txt
       
       
Linked from in-page hyperlinks:
machines_edit_machine.txt
deployments_edit_deployment.txt
images_edit_image.txt

Conventions:     

[-------------------]          Form field
{-------------------}          Drop down
{[-----------------]}          Combo box
(Link)                         Hyperlink that migrates elsewhere
<Submit>                       Hyperlink that performs an action
!Submit!                       Button

General web style:

Top level "$title" present on each page.
Major categories below header
Pick a category to reveal options beneath it 
Log out button on every page in title.
Let long pages scroll when needed
Minimal presentation, no fancy DHTML tabs and so forth.  Keep it simple.
Let long pages scroll if need be.
Minimal graphics for first revision.
Make something that's easy to code and maintain.

Philosophy:

In general, things are organized based on nouns, not verbs.  That is, by
looking at a machine, you can see the images running on it, and access
those image profiles from that page.  Or, you could look at appliance
definition, and find the running instances from that page as well.

Pages that present information should also allow that information to
be added in the same way.  So there will be primarily one page for a record
about a piece of hardware, for instance.  On the page, the details can
be seen and/or edited, and the monitoring info and what's up with that
machine can be seen on that same page.  This is to preserve context.
It doesn't make sense, for instance, to power off a machine without
knowing what VM's are on it, and so forth.  On every page it should
be very obvious on what can be done with the noun and the user
won't have to click between various subpages to understand the associations
between machines, images, and appliance configurations.  They'll all
be there together.

About the files:

Notes will appear below each page describing what each page does
and where some of the links go and/or do.


